generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
  engineType      = "binary"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["auth", "cron", "extensions", "god", "god_views"]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model audit_log_entries {
  instance_id String?   @db.Uuid
  id          String    @id @db.Uuid
  payload     Json?
  created_at  DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc+4'::text)")) @db.Timestamptz(6)
  ip_address  String?   @default("") @db.VarChar(64)

  @@index([instance_id], map: "audit_logs_instance_id_idx")
  @@schema("auth")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model flow_state {
  id                     String                @id @db.Uuid
  user_id                String?               @db.Uuid
  auth_code              String
  code_challenge_method  code_challenge_method
  code_challenge         String
  provider_type          String
  provider_access_token  String?
  provider_refresh_token String?
  created_at             DateTime?             @default(dbgenerated("(now() AT TIME ZONE 'utc+4'::text)")) @db.Timestamptz(6)
  updated_at             DateTime?             @default(dbgenerated("(now() AT TIME ZONE 'utc+4'::text)")) @db.Timestamptz(6)
  authentication_method  String
  auth_code_issued_at    DateTime?             @db.Timestamptz(6)

  @@index([auth_code], map: "idx_auth_code")
  @@index([user_id, authentication_method], map: "idx_user_id_auth_method")
  @@schema("auth")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model identities {
  id              String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  provider_id     String
  user_id         String    @db.Uuid
  identity_data   Json
  provider        String
  last_sign_in_at DateTime? @db.Timestamptz(6)
  created_at      DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc+4'::text)")) @db.Timestamptz(6)
  updated_at      DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc+4'::text)")) @db.Timestamptz(6)
  email           String?
  users           users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider_id, provider], map: "identities_provider_id_provider_unique")
  @@index([email], map: "idx_identities_email")
  @@index([user_id], map: "idx_identities_user_id")
  @@schema("auth")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model instances {
  id              String    @id @db.Uuid
  uuid            String?   @db.Uuid
  raw_base_config String?
  created_at      DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc+4'::text)")) @db.Timestamptz(6)
  updated_at      DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc+4'::text)")) @db.Timestamptz(6)

  @@schema("auth")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model mfa_amr_claims {
  id                    String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  session_id            String    @db.Uuid
  created_at            DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc+4'::text)")) @db.Timestamptz(6)
  updated_at            DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc+4'::text)")) @db.Timestamptz(6)
  authentication_method String

  @@unique([session_id, authentication_method], map: "mfa_amr_claims_session_id_authentication_method_pkey")
  @@schema("auth")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model mfa_challenges {
  id                     String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  factor_id              String    @db.Uuid
  created_at             DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc+4'::text)")) @db.Timestamptz(6)
  verified_at            DateTime? @db.Timestamptz(6)
  ip_address             String    @db.Inet
  otp_code               String?
  web_authn_session_data Json?

  @@index([created_at(sort: Desc)], map: "idx_mfa_challenge_created_at")
  @@schema("auth")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model mfa_factors {
  id                   String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id              String        @db.Uuid
  friendly_name        String?
  factor_type          factor_type
  status               factor_status
  created_at           DateTime?     @default(dbgenerated("(now() AT TIME ZONE 'utc+4'::text)")) @db.Timestamptz(6)
  updated_at           DateTime?     @default(dbgenerated("(now() AT TIME ZONE 'utc+4'::text)")) @db.Timestamptz(6)
  secret               String?
  phone                String?
  last_challenged_at   DateTime?     @unique @db.Timestamptz(6)
  web_authn_credential Json?
  web_authn_aaguid     String?       @db.Uuid
  users                users         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, phone], map: "unique_phone_factor_per_user")
  @@index([user_id], map: "idx_mfa_factors_user")
  @@schema("auth")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model one_time_tokens {
  id         String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id    String              @db.Uuid
  token_type one_time_token_type
  token_hash String              @unique
  relates_to String
  created_at DateTime?           @default(dbgenerated("(now() AT TIME ZONE 'utc+4'::text)")) @db.Timestamptz(6)
  updated_at DateTime?           @default(dbgenerated("(now() AT TIME ZONE 'utc+4'::text)")) @db.Timestamptz(6)
  users      users               @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, token_type], map: "one_time_tokens_user_id_token_type_unique")
  @@index([created_at], map: "idx_one_time_tokens_created_at")
  @@index([token_hash], map: "idx_one_time_tokens_token_hash")
  @@index([user_id], map: "idx_one_time_tokens_user_id")
  @@schema("auth")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model refresh_tokens {
  instance_id String?   @db.Uuid
  id          BigInt    @id @default(autoincrement())
  token       String?   @unique
  user_id     String?
  revoked     Boolean?
  created_at  DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc+4'::text)")) @db.Timestamptz(6)
  updated_at  DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc+4'::text)")) @db.Timestamptz(6)
  parent      String?
  session_id  String?   @db.Uuid

  @@index([instance_id], map: "idx_refresh_tokens_instance_id")
  @@index([instance_id, user_id], map: "idx_refresh_tokens_instance_id_user_id")
  @@index([parent], map: "idx_refresh_tokens_parent")
  @@index([session_id, revoked], map: "idx_refresh_tokens_session_id")
  @@index([updated_at(sort: Desc)], map: "idx_refresh_tokens_updated")
  @@schema("auth")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model saml_providers {
  id                String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  sso_provider_id   String    @db.Uuid
  entity_id         String    @unique
  metadata_xml      String
  metadata_url      String?
  attribute_mapping Json?
  created_at        DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc+4'::text)")) @db.Timestamptz(6)
  updated_at        DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc+4'::text)")) @db.Timestamptz(6)
  name_id_format    String?

  @@index([sso_provider_id], map: "idx_saml_providers_sso_provider")
  @@schema("auth")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model saml_relay_states {
  id              String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  sso_provider_id String    @db.Uuid
  request_id      String
  for_email       String?
  redirect_to     String?
  created_at      DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc+4'::text)")) @db.Timestamptz(6)
  updated_at      DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc+4'::text)")) @db.Timestamptz(6)
  flow_state_id   String?   @db.Uuid

  @@index([created_at(sort: Desc)], map: "idx_saml_relay_states_created_at")
  @@index([for_email], map: "idx_saml_relay_states_for_email")
  @@index([sso_provider_id], map: "idx_saml_relay_states_sso_provider")
  @@schema("auth")
}

model schema_migrations {
  version String @id

  @@schema("auth")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model sessions {
  id           String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id      String     @db.Uuid
  created_at   DateTime?  @default(dbgenerated("(now() AT TIME ZONE 'utc+4'::text)")) @db.Timestamptz(6)
  updated_at   DateTime?  @default(dbgenerated("(now() AT TIME ZONE 'utc+4'::text)")) @db.Timestamptz(6)
  factor_id    String?    @db.Uuid
  aal          aal_level?
  not_after    DateTime?  @db.Timestamptz(6)
  refreshed_at DateTime?  @db.Timestamp(6)
  user_agent   String?
  ip           String?    @db.Inet
  tag          String?
  users        users      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([not_after(sort: Desc)], map: "idx_sessions_not_after")
  @@index([user_id], map: "idx_sessions_user_id")
  @@schema("auth")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model sso_domains {
  id              String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  sso_provider_id String    @db.Uuid
  domain          String
  created_at      DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc+4'::text)")) @db.Timestamptz(6)
  updated_at      DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc+4'::text)")) @db.Timestamptz(6)

  @@index([sso_provider_id], map: "idx_sso_domains_sso_provider")
  @@schema("auth")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model sso_providers {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  resource_id String?
  created_at  DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc+4'::text)")) @db.Timestamptz(6)
  updated_at  DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc+4'::text)")) @db.Timestamptz(6)

  @@schema("auth")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model users {
  instance_id                 String?           @db.Uuid
  id                          String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  aud                         String?           @db.VarChar(255)
  role                        String?           @db.VarChar(255)
  email                       String?           @unique @db.VarChar(255)
  first_name                  String?           @db.VarChar(255)
  last_name                   String?           @db.VarChar(255)
  encrypted_password          String?           @db.VarChar(255)
  email_confirmed_at          DateTime?         @db.Timestamptz(6)
  invited_at                  DateTime?         @db.Timestamptz(6)
  confirmation_token          String?           @db.VarChar(255)
  confirmation_sent_at        DateTime?         @db.Timestamptz(6)
  recovery_token              String?           @db.VarChar(255)
  recovery_sent_at            DateTime?         @db.Timestamptz(6)
  email_change_token_new      String?           @db.VarChar(255)
  email_change                String?           @db.VarChar(255)
  email_change_sent_at        DateTime?         @db.Timestamptz(6)
  last_sign_in_at             DateTime?         @db.Timestamptz(6)
  raw_app_meta_data           Json?
  raw_user_meta_data          Json?
  is_super_admin              Boolean?
  created_at                  DateTime?         @default(dbgenerated("(now() AT TIME ZONE 'utc+4'::text)")) @db.Timestamptz(6)
  updated_at                  DateTime?         @default(dbgenerated("(now() AT TIME ZONE 'utc+4'::text)")) @updatedAt @db.Timestamptz(6)
  phone                       String?           @unique @db.VarChar(255)
  phone_confirmed_at          DateTime?         @db.Timestamptz(6)
  phone_change                String?           @default("") @db.VarChar(255)
  phone_change_token          String?           @default("") @db.VarChar(255)
  phone_change_sent_at        DateTime?         @db.Timestamptz(6)
  confirmed_at                DateTime?         @db.Timestamptz(6)
  email_change_token_current  String?           @default("") @db.VarChar(255)
  email_change_confirm_status Int?              @default(0) @db.SmallInt
  banned_until                DateTime?         @db.Timestamptz(6)
  reauthentication_token      String?           @default("") @db.VarChar(255)
  reauthentication_sent_at    DateTime?         @db.Timestamptz(6)
  is_sso_user                 Boolean?          @default(false)
  deleted_at                  DateTime?         @db.Timestamptz(6)
  is_anonymous                Boolean?          @default(false)
  identities                  identities[]
  mfa_factors                 mfa_factors[]
  one_time_tokens             one_time_tokens[]
  sessions                    sessions[]
  god_invitations             god_invitations[]
  god_users                   god_users[]

  @@index([instance_id], map: "idx_users_instance_id")
  @@index([instance_id, email], map: "idx_users_instance_id_email")
  @@schema("auth")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model job {
  jobid    BigInt  @id @default(autoincrement())
  schedule String
  command  String
  nodename String  @default("localhost")
  nodeport Int     @default(dbgenerated("inet_server_port()"))
  database String  @default(dbgenerated("current_database()"))
  username String  @default(dbgenerated("CURRENT_USER"))
  active   Boolean @default(true)
  jobname  String?

  @@unique([jobname, username], map: "jobname_username_uniq")
  @@schema("cron")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model job_run_details {
  jobid          BigInt?
  runid          BigInt    @id @default(autoincrement())
  job_pid        Int?
  database       String?
  username       String?
  command        String?
  status         String?
  return_message String?
  start_time     DateTime? @db.Timestamptz(6)
  end_time       DateTime? @db.Timestamptz(6)

  @@schema("cron")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model god_chat_conversations {
  id                String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id           String              @db.Uuid
  title             String?             @default(dbgenerated("('Chat_'::text || to_char((now() AT TIME ZONE 'utc+4'::text), 'MM-DD-YYYY_HH12:MIAM'::text))")) @db.VarChar(100)
  created_at        DateTime?           @default(dbgenerated("(now() AT TIME ZONE 'utc+4'::text)")) @db.Timestamptz(6)
  updated_at        DateTime?           @default(dbgenerated("(now() AT TIME ZONE 'utc+4'::text)")) @db.Timestamptz(6)
  god_users         god_users           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  god_chat_messages god_chat_messages[]

  @@schema("god")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model god_chat_messages {
  id                     Int                    @id @default(autoincrement())
  role                   String                 @db.VarChar(20)
  content                String
  conversation_id        String                 @db.Uuid
  messages               Json[]                 @default([])
  created_at             DateTime?              @default(dbgenerated("(now() AT TIME ZONE 'utc+4'::text)")) @db.Timestamptz(6)
  god_chat_conversations god_chat_conversations @relation(fields: [conversation_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([conversation_id])
  @@index([conversation_id], map: "idx_god_chat_messages_conversation_id")
  @@schema("god")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model god_invitations {
  id               String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email            String?
  first_name       String?
  last_name        String?
  phone            String?
  bank_id          String?   @db.Uuid
  bank_name        String?
  responsibilities Json?
  token            String?   @unique
  created_at       DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc+4'::text)")) @db.Timestamptz(6)
  sent_by_id       String?   @db.Uuid
  updated_at       DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc+4'::text)")) @db.Timestamptz(6)
  users            users?    @relation(fields: [sent_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([email], map: "idx_god_invitations_email")
  @@index([token], map: "idx_god_invitations_token")
  @@schema("god")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model god_message_templates {
  id                Int                 @id @default(autoincrement())
  theme_id          String?             @db.VarChar(50)
  prompt            String
  message           String?
  character_count   Int?
  language          String?             @default("en") @db.VarChar(10)
  active            Boolean?            @default(true)
  success_rate      Float?              @default(0)
  times_used        Int?                @default(0)
  last_used_at      DateTime?           @default(dbgenerated("(now() AT TIME ZONE 'utc+4'::text)")) @db.Timestamptz(6)
  created_by        String?             @db.Uuid
  created_at        DateTime?           @default(dbgenerated("(now() AT TIME ZONE 'utc+4'::text)")) @db.Timestamptz(6)
  updated_at        DateTime?           @default(dbgenerated("(now() AT TIME ZONE 'utc+4'::text)")) @db.Timestamptz(6)
  god_users         god_users?          @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  god_sent_messages god_sent_messages[]

  @@index([theme_id], map: "idx_message_templates_theme")
  @@schema("god")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model god_sent_messages {
  id                    Int                    @id @default(autoincrement())
  user_id               String?                @db.Uuid
  subscription_id       String?                @db.Uuid
  phone_number          String                 @db.VarChar(20)
  message               String
  theme_id              String                 @db.VarChar(50)
  template_id           Int?
  twilio_sid            String                 @db.VarChar(50)
  status                String?                @default("SENT") @db.VarChar(20)
  delivery_status       String?                @db.VarChar(20)
  error_message         String?
  sent_at               DateTime?              @default(dbgenerated("(now() AT TIME ZONE 'utc+4'::text)")) @db.Timestamptz(6)
  delivered_at          DateTime?              @default(dbgenerated("(now() AT TIME ZONE 'utc+4'::text)")) @db.Timestamptz(6)
  created_at            DateTime?              @default(dbgenerated("(now() AT TIME ZONE 'utc+4'::text)")) @db.Timestamptz(6)
  delivery_error        String?
  delivery_attempts     Int?                   @default(0)
  last_delivery_attempt DateTime?              @db.Timestamptz(6)
  god_subscriptions     god_subscriptions?     @relation(fields: [subscription_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  god_message_templates god_message_templates? @relation(fields: [template_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  god_users             god_users?             @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([phone_number], map: "idx_sent_messages_phone")
  @@index([sent_at], map: "idx_sent_messages_sent_at")
  @@index([subscription_id], map: "idx_sent_messages_subscription")
  @@index([user_id], map: "idx_sent_messages_user")
  @@schema("god")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model god_subscriptions {
  id                     String                    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id                String                    @db.Uuid
  status                 subscription_status_enum? @default(TRIAL)
  theme_ids              String[]                  @default(["faith"])
  preferred_time         DateTime?                 @default(dbgenerated("'09:00:00'::time without time zone")) @db.Time(6)
  frequency              String?                   @default("DAILY") @db.VarChar(20)
  trial_ends_at          DateTime?                 @default(dbgenerated("(now() AT TIME ZONE 'utc+4'::text)")) @db.Timestamptz(6)
  last_message_at        DateTime?                 @default(dbgenerated("(now() AT TIME ZONE 'utc+4'::text)")) @db.Timestamptz(6)
  next_message_at        DateTime?                 @default(dbgenerated("(now() AT TIME ZONE 'utc+4'::text)")) @db.Timestamptz(6)
  subscription_ends_at   DateTime?                 @default(dbgenerated("(now() AT TIME ZONE 'utc+4'::text)")) @db.Timestamptz(6)
  payment_status         String?                   @db.VarChar(20)
  stripe_customer_id     String?                   @db.VarChar(50)
  stripe_subscription_id String?                   @db.VarChar(50)
  created_at             DateTime?                 @default(dbgenerated("(now() AT TIME ZONE 'utc+4'::text)")) @db.Timestamptz(6)
  updated_at             DateTime?                 @default(dbgenerated("(now() AT TIME ZONE 'utc+4'::text)")) @db.Timestamptz(6)
  cancelled_at           DateTime?                 @default(dbgenerated("(now() AT TIME ZONE 'utc+4'::text)")) @db.Timestamptz(6)
  god_sent_messages      god_sent_messages[]
  god_users              god_users                 @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([status], map: "idx_god_subscriptions_status")
  @@index([user_id], map: "idx_god_subscriptions_user_id")
  @@schema("god")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model god_user_preferences {
  id                        String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id                   String    @unique(map: "god_user_preferences_user_id_unique") @db.Uuid
  theme_preferences         String[]  @default(["faith"])
  blocked_themes            String[]  @default([])
  preferred_bible_version   String?   @default("NIV") @db.VarChar(20)
  message_length_preference String?   @default("MEDIUM") @db.VarChar(20)
  created_at                DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc+4'::text)")) @db.Timestamptz(6)
  updated_at                DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc+4'::text)")) @db.Timestamptz(6)
  god_users                 god_users @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id], map: "idx_god_user_preferences_user_id")
  @@schema("god")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model god_users {
  id                     String                    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  auth_user_id           String?                   @db.Uuid
  email                  String                    @unique(map: "god_users_email_unique")
  first_name             String?
  last_name              String?
  phone                  String?
  role                   user_role_enum            @default(USER)
  subscription_status    subscription_status_enum? @default(TRIAL)
  created_at             DateTime?                 @default(dbgenerated("(now() AT TIME ZONE 'utc+4'::text)")) @db.Timestamptz(6)
  updated_at             DateTime?                 @default(dbgenerated("(now() AT TIME ZONE 'utc+4'::text)")) @db.Timestamptz(6)
  god_chat_conversations god_chat_conversations[]
  god_message_templates  god_message_templates[]
  god_sent_messages      god_sent_messages[]
  god_subscriptions      god_subscriptions[]
  god_user_preferences   god_user_preferences?
  users                  users?                    @relation(fields: [auth_user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([auth_user_id], map: "idx_god_users_auth_user_id")
  @@index([email], map: "idx_god_users_email")
  @@schema("god")
}

enum aal_level {
  aal1
  aal2
  aal3

  @@schema("auth")
}

enum code_challenge_method {
  s256
  plain

  @@schema("auth")
}

enum factor_status {
  unverified
  verified

  @@schema("auth")
}

enum factor_type {
  totp
  webauthn
  phone

  @@schema("auth")
}

enum one_time_token_type {
  confirmation_token
  reauthentication_token
  recovery_token
  email_change_token_new
  email_change_token_current
  phone_change_token

  @@schema("auth")
}

enum subscription_status_enum {
  ACTIVE
  PAUSED
  CANCELLED
  TRIAL

  @@schema("god")
}

enum user_role_enum {
  USER
  ADMIN
  STAKEHOLDER
  MODERATOR

  @@schema("god")
}
